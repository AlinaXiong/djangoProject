public void fetchAndInsertDSPQueryClientLogs(String env) {
    List<Map<String, String>> clientRegionPairs = clientLogMapper.selectDistinctClientRegion(env);
    clientLogMapper.deleteAllClientLogResults(env); // 清空旧记录

    int threadCount = 8; // 你可以根据机器性能设定线程数
    ExecutorService executor = Executors.newFixedThreadPool(threadCount);

    List<Future<?>> futures = new ArrayList<>();

    for (Map<String, String> pair : clientRegionPairs) {
        futures.add(executor.submit(() -> {
            String clientName = pair.get("CLIENTNAME");
            String regionName = pair.get("REGIONNAME");

            try (SqlSession sqlSession = sqlSessionTemplate.getSqlSessionFactory().openSession(false)) {
                DSPQueryClientInfo data = clientLogMapper.selectLogsByClientAndRegion(env, clientName, regionName);

                if (data == null) return;

                DSPQueryClientInfoResult clientData = new DSPQueryClientInfoResult();

                clientData.setClientName(data.getClientName() != null ? data.getClientName() : "defaultClientName");
                clientData.setClientIp(data.getClientIp() != null ? data.getClientIp() : "defaultClientIp");
                clientData.setEnvironment(data.getEnvironment() != null ? data.getEnvironment() : "defaultEnvironment");
                clientData.setServerName(data.getServerName() != null ? data.getServerName() : "defaultServerName");
                clientData.setCacheName(data.getCacheName() != null ? data.getCacheName() : "defaultCacheName");
                clientData.setRegionName(data.getRegionName() != null ? data.getRegionName() : "defaultRegionName");
                clientData.setLocation(data.getLocation() != null ? data.getLocation() : "defaultLocation");

                Timestamp logTime = data.getLogTime() != null
                        ? data.getLogTime()
                        : new Timestamp(System.currentTimeMillis());
                clientData.setLogTime(logTime);

                clientData.setQueryQql(data.getQueryQql() != null ? data.getQueryQql() : "defaultQueryQql");
                clientData.setAppId(data.getAppId() != null ? data.getAppId() : "defaultAppId");
                clientData.setDataSource(data.getDataSource() != null ? data.getDataSource() : "defaultDataSource");
                clientData.setTarget(data.getTarget() != null ? data.getTarget() : "defaultTarget");
                clientData.setType(data.getType() != null ? data.getType() : "defaultType");
                clientData.setQo1Size(data.getQo1Size() != null ? data.getQo1Size() : "defaultQo1Size");
                clientData.setDuration(data.getDuration() != null ? data.getDuration() : "defaultDuration");
                clientData.setHint1(data.getHint1() != null ? data.getHint1() : "defaultHint1");
                clientData.setSuccess(data.getSuccess() != null ? data.getSuccess() : "defaultSuccess");

                Timestamp processTime = data.getProcessTime() != null
                        ? data.getProcessTime()
                        : new Timestamp(System.currentTimeMillis());
                clientData.setProcessTime(processTime);

                clientData.setUpdateTime(new Timestamp(System.currentTimeMillis()));

                clientLogMapper.insertClientLogResults(env, clientData);

                sqlSession.commit();
            } catch (Exception e) {
                log.error("Error processing clientName: {}, regionName: {}, error: {}", clientName, regionName, e.getMessage(), e);
            }
        }));
    }

    // 等待所有线程执行完毕
    for (Future<?> future : futures) {
        try {
            future.get(); // 会抛出异常或等待任务完成
        } catch (Exception e) {
            log.error("Thread task failed: {}", e.getMessage(), e);
        }
    }

    executor.shutdown();
    log.info("All client logs processed and inserted.");
}
